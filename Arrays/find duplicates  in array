import java.util.ArrayList;
import java.util.List;

public class Solution {
    public List<Integer> findDuplicates(int[] nums) {
        List<Integer> duplicates = new ArrayList<>();

        for (int num : nums) {
            // Get the absolute value of the current element as an index (0-based)
            int index = Math.abs(num) - 1;

            // If the value at the index is negative, it means we have seen this element before,
            // and it is a duplicate.
            if (nums[index] < 0) {
                duplicates.add(Math.abs(num));
            } else {
                // Otherwise, negate the value at the index to mark it as visited.
                nums[index] = -nums[index];
            }
        }

        // Restore the array to its original state (optional).
        for (int i = 0; i < nums.length; i++) {
            nums[i] = Math.abs(nums[i]);
        }

        return duplicates;
    }
}


Given input:
```java
int[] nums = {4, 3, 2, 7, 8, 2, 1, 4};
```

Dry Run:
1. Initialize an empty ArrayList `duplicates` to store the duplicate elements.
2. Start iterating through the `nums` array:
   - For `num = 4` (at index 0):
     - Get the absolute value of `num`: `index = |4| - 1 = 3`
     - Check `nums[3]`, which is `7`. Since it's positive, negate the value at the index `3`: `nums[3] = -7`
   - For `num = 3` (at index 1):
     - Get the absolute value of `num`: `index = |3| - 1 = 2`
     - Check `nums[2]`, which is `2`. Since it's positive, negate the value at the index `2`: `nums[2] = -2`
   - For `num = 2` (at index 2):
     - Get the absolute value of `num`: `index = |2| - 1 = 1`
     - Check `nums[1]`, which is `-3`. It's already negative, so it's a duplicate element. Add it to the `duplicates` list: `duplicates = [3]`
   - For `num = 7` (at index 3):
     - Get the absolute value of `num`: `index = |7| - 1 = 6`
     - Check `nums[6]`, which is `1`. Since it's positive, negate the value at the index `6`: `nums[6] = -1`
   - For `num = 8` (at index 4):
     - Get the absolute value of `num`: `index = |8| - 1 = 7`
     - Check `nums[7]`, which is `4`. Since it's positive, negate the value at the index `7`: `nums[7] = -4`
   - For `num = 2` (at index 5):
     - Get the absolute value of `num`: `index = |2| - 1 = 1`
     - Check `nums[1]`, which is `-3`. It's already negative, so it's a duplicate element. Add it to the `duplicates` list: `duplicates = [3, 2]`
   - For `num = 1` (at index 6):
     - Get the absolute value of `num`: `index = |1| - 1 = 0`
     - Check `nums[0]`, which is `4`. Since it's positive, negate the value at the index `0`: `nums[0] = -4`
   - For `num = 4` (at index 7):
     - Get the absolute value of `num`: `index = |4| - 1 = 3`
     - Check `nums[3]`, which is `-7`. It's already negative, so it's a duplicate element. Add it to the `duplicates` list: `duplicates = [3, 2, 7]`
3. The loop ends, and the function returns the `duplicates` list: `[3, 2, 7]`

Final Output: `[3, 2, 7]`

The `findDuplicates` function has identified all the duplicate elements in the input array `nums` and returned them as a list.
